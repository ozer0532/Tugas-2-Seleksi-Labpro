{"version":3,"sources":["getData.js","searchInput.js","personInfo.js","friendInfoCard.js","dataDisplayer.js","graphDisplayer.js","App.js","serviceWorker.js","index.js"],"names":["apiURL","GetData","index","a","p","url","resolve","axios","get","validateStatus","status","response","data","FilterData","returnVal","payload","friends","filter","entry","stringEntry","JSON","stringify","findIndex","item","id","GetAllPerson","TraverseGraphLoop","list","currentList","some","e","push","name","i","length","console","log","styles","paper","display","padding","margin","field","flex","marginLeft","icon","SearchInput","props","state","value","inputChange","bind","onEnterPressed","event","this","setState","target","keyCode","Paper","style","InputBase","placeholder","onChange","onKeyDown","IconButton","onClick","onSearch","React","Component","PersonInfo","Fragment","Typography","variant","headerVariant","infoVariant","element","card","marginTop","marginBottom","actionArea","FriendInfoCard","Card","CardActionArea","color","mainContainer","spaced","DataDisplayer","RenderFriends","SearchText","searching","fail","Box","map","Divider","container","height","overflow","graph","width","myConfig","nodeHighlightBehavior","node","size","highlightStrokeColor","labelProperty","link","highlightColor","directed","GraphDisplayer","decorateGraphNodesWithInitialPositioning","nodes","n","Object","assign","x","window","innerHeight","Math","floor","random","y","config","onClickNode","sizeBox","clientHeight","clientWidth","nodeId","ref","elmt","links","root","flexDirection","background","searchContainer","overflowY","dataContainer","maxHeight","graphContainer","displayerContainer","App","personList","currentPerson","graphData","GetPersonList","updateGraphData","text","trim","parsedId","parseInt","isNaN","collectedData","checkExist","setInterval","clearInterval","foundList","undefined","find","forEach","friend","linkData","source","Container","Grid","spacing","xs","md","lg","Boolean","location","hostname","match","render","StrictMode","rel","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c3e5c02c.chunk.js","sourcesContent":["import url from 'url';\r\nimport axios from 'axios';\r\n\r\nconst apiURL = 'https://avatar.labpro.dev/friends/'\r\nconst graphStartPoint = '1'\r\n\r\n// Based on: https://malcoded.com/posts/react-http-requests-axios/\r\n// Get friends data from an index\r\nexport async function GetData (index) {\r\n  const p = url.resolve(apiURL, index);\r\n  const response = await axios.get(p, {validateStatus:function(status) {return true;}});\r\n  let data = response.data;\r\n  // Remove duplicates\r\n  if (response.status === 200) {\r\n      data = FilterData(response.data);\r\n  }\r\n  return data;\r\n}\r\n\r\n// Filters friend data to remove API mistakes\r\nasync function FilterData (data) {\r\n  let returnVal = data;\r\n\r\n  // Filter duplicate friends https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript\r\n  returnVal.payload.friends = returnVal.payload.friends.filter((entry, index) => {\r\n    let stringEntry = JSON.stringify(entry);\r\n    return index === returnVal.payload.friends.findIndex((item) => {\r\n      return stringEntry === JSON.stringify(item)\r\n    });\r\n  })\r\n\r\n  // Filter person = friend\r\n  returnVal.payload.friends = returnVal.payload.friends.filter((entry) => {\r\n    return entry.id !== returnVal.payload.id;\r\n  })\r\n  return returnVal;\r\n}\r\n\r\n// Get all person from API\r\nexport async function GetAllPerson () {\r\n  let list = await TraverseGraphLoop (graphStartPoint, []);\r\n  return list;\r\n}\r\n\r\n// Recursive function to get all person\r\n// Id is the id of the person\r\n// Currentlist is the currently tracked people data\r\nasync function TraverseGraphLoop (id, currentList) {\r\n  if (currentList.some(e => e.id === id)) {\r\n    return currentList;\r\n  }\r\n\r\n  // Get Friends List\r\n  const response = await GetData(id);\r\n  let list = currentList;\r\n  if (response.status === 200)  {\r\n    // Save name in currentList\r\n    currentList.push({id: id, name: response.payload.name});\r\n    let friends = response.payload.friends;\r\n    for (let i = 0; i < friends.length; i++) {\r\n      list = await TraverseGraphLoop(friends[i].id, list);\r\n    }\r\n  } else if (response.status === 404) {\r\n    console.log('Missing: ' + id);\r\n  }\r\n\r\n  return list;\r\n}","import React from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport InputBase from '@material-ui/core/InputBase'\r\nimport Paper from '@material-ui/core/Paper'\r\n\r\nimport SearchIcon from '@material-ui/icons/Search'\r\n\r\n// CSS-like styling\r\nconst styles = {\r\n  paper: {\r\n    display: 'flex',\r\n    padding: '2px 4px',\r\n    margin: '10px',\r\n  },\r\n  field: {\r\n    flex: 1,\r\n    marginLeft: '10px',\r\n  },\r\n  icon: {\r\n    padding: '10px',\r\n  },\r\n};\r\n\r\nclass SearchInput extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      value: '',\r\n    }\r\n\r\n    this.inputChange = this.inputChange.bind(this);\r\n    this.onEnterPressed = this.onEnterPressed.bind(this);\r\n  }\r\n\r\n  // Updates input value\r\n  inputChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n\r\n  // Executes enter-press callback\r\n  // https://stackoverflow.com/questions/43384039/how-to-get-input-textfield-values-when-enter-key-is-pressed-in-react-js\r\n  onEnterPressed (event) {\r\n    if (event.keyCode === 13) {\r\n      this.props.onEnterPressed( this.state.value );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // Main Container\r\n      <Paper style = { styles.paper } >\r\n        {/* Input Field */}\r\n        <InputBase\r\n          style = { styles.field }\r\n          placeholder = 'Pencarian - Masukkan nama lengkap atau id'\r\n          onChange = { this.inputChange }\r\n          onKeyDown = { this.onEnterPressed }\r\n        />\r\n\r\n        {/* Search Button */}\r\n        <IconButton\r\n          style = { styles.icon }\r\n          onClick = { () => this.props.onSearch( this.state.value ) }\r\n        >\r\n          <SearchIcon/>\r\n        </IconButton>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchInput;","import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nfunction PersonInfo (props) {\r\n  return (\r\n    <React.Fragment>\r\n      <Typography variant = { props.headerVariant }>\r\n        { props.data.name }\r\n      </Typography>\r\n      <Typography variant = { props.infoVariant }>\r\n        { 'Id: ' + props.data.id + ' ' }\r\n        Elemen: <i>{ props.data.element }</i>\r\n      </Typography>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default PersonInfo;","import React from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport PersonInfo from './personInfo';\r\n\r\nconst styles = {\r\n  card: {\r\n    marginTop: '10px',\r\n    marginBottom: '10px',\r\n  },\r\n  actionArea: {\r\n    padding: '10px',\r\n  }\r\n}\r\n\r\nfunction FriendInfoCard (props) {\r\n  return (\r\n    <Card style = { styles.card }>\r\n      <CardActionArea \r\n        style = { styles.actionArea } \r\n        onClick = { () => props.onSearch(props.entry.id) }\r\n      >\r\n        <Typography \r\n          variant = 'subtitle2'\r\n          color='textSecondary'\r\n        >\r\n          { (props.index + 1) + '.' }\r\n        </Typography>\r\n        <PersonInfo\r\n          headerVariant = 'h6'\r\n          infoVariant = 'body1'\r\n          data = { props.entry }\r\n        />\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default FriendInfoCard;","import React from 'react';\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport FriendInfoCard from './friendInfoCard';\r\nimport PersonInfo from './personInfo';\r\n\r\n// TODO: Select person when panel is clicked\r\n\r\nconst styles = {\r\n  mainContainer: {\r\n    margin: '15px',\r\n  },\r\n  spaced: {\r\n    marginTop: '15px',\r\n  },\r\n}\r\n\r\nclass DataDisplayer extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.RenderFriends = this.RenderFriends.bind(this);\r\n    this.SearchText = this.SearchText.bind(this);\r\n  }\r\n\r\n  RenderFriends () {\r\n    if (this.props.data.name === '-' || this.props.searching || this.props.fail) {\r\n      return '';\r\n    } else if ('friends' in this.props.data && this.props.data.friends.length > 0) {\r\n      return (\r\n        <Box style = { styles.spaced } >\r\n          <Typography variant='h6'> \r\n            Rekan: \r\n          </Typography>\r\n\r\n          { this.props.data.friends.map((entry, index) => {\r\n            return (\r\n              <FriendInfoCard\r\n                onSearch = { this.props.onSearch } \r\n                entry = { entry } \r\n                index = { index } \r\n              />\r\n            );\r\n          })}\r\n        </Box>\r\n      );\r\n    } else {\r\n      return (\r\n        <Box>\r\n          <Typography> Rekan: Tidak ada </Typography>\r\n        </Box>\r\n      );\r\n    }\r\n  }\r\n\r\n  SearchText () {\r\n    return (\r\n      <React.Fragment>\r\n        <Typography\r\n          variant = 'subtitle1'\r\n          color = 'textSecondary'\r\n        >\r\n          Hasil Pencarian:\r\n        </Typography>\r\n        {   this.props.searching\r\n          ? <Typography variant='h5'> Mencari... </Typography>\r\n          : this.props.fail\r\n          ? <Typography variant='h5'> Orang tidak ditemukan </Typography>\r\n          : this.props.data.name === '-'\r\n          ? <Typography variant='h5'> - </Typography>\r\n          :<PersonInfo\r\n              headerVariant = 'h5'\r\n              infoVariant = 'body1'\r\n              data = { this.props.data }\r\n            />\r\n        }\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Box style = { styles.mainContainer }>\r\n        {/* Top Row */}\r\n        { this.SearchText() }\r\n\r\n        <Divider style = { styles.spaced } />\r\n        {/* Bottom Row (Friends) */}\r\n        { this.RenderFriends() }\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataDisplayer;","import React from 'react';\r\n\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport { Graph } from 'react-d3-graph';\r\n\r\n// CSS like styling\r\nconst styles = {\r\n  container: {\r\n    height: '100%',\r\n    overflow: 'hidden',\r\n  },\r\n  graph: {\r\n    height: '100%',\r\n    width: '100%',\r\n  }\r\n}\r\n\r\n// Graph configuration\r\nvar myConfig = {\r\n  nodeHighlightBehavior: true,\r\n  node: {\r\n    color: 'lightgreen',\r\n    size: 120,\r\n    highlightStrokeColor: 'blue',\r\n    labelProperty: 'name',\r\n  },\r\n  link: {\r\n    highlightColor: 'lightblue',\r\n  },\r\n  height:800,\r\n  directed: true,\r\n};\r\n\r\n// Container for the react-d3-graph component\r\n// Has options for expanding on click and various config\r\n// PROPS:\r\n//     - data: Javascript Object containing a list of 'nodes' and a list of 'links'\r\n//     - onClick: Callback function to run when a node is clicked\r\nclass GraphDisplayer extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      config: myConfig,\r\n    }\r\n\r\n    this.onClickNode = this.onClickNode.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Graph resize by getting box height https://stackoverflow.com/questions/35153599/reactjs-get-height-of-an-element\r\n    const height = this.sizeBox.clientHeight;\r\n    const width = this.sizeBox.clientWidth;\r\n    myConfig.height = height;\r\n    myConfig.width = width;\r\n    this.setState({  });\r\n  }\r\n\r\n  // Init at approximately the middle https://github.com/danielcaldas/react-d3-graph/blob/master/sandbox/Sandbox.jsx\r\n  decorateGraphNodesWithInitialPositioning = nodes => {\r\n    return nodes.map(n =>\r\n        Object.assign({}, n, {\r\n            x: n.x || window.innerHeight / 2 - Math.floor(Math.random() * 100),\r\n            y: n.y || window.innerHeight / 2 - Math.floor(Math.random() * 100),\r\n        })\r\n    );\r\n  };\r\n\r\n  // Runs the onClick property\r\n  onClickNode (nodeId) {\r\n    if (typeof this.props.onClick === 'function') {\r\n      console.log('yes');\r\n      this.props.onClick(nodeId);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Box \r\n        ref = {(elmt => {this.sizeBox = elmt})} \r\n        style = { styles.container }\r\n      >\r\n        <Graph \r\n          style={styles.graph}\r\n          ref = {(elmt => {this.graph = elmt})} \r\n          id='graph' // id is mandatory, if no id is defined rd3g will throw an error\r\n          data={{\r\n            nodes: this.decorateGraphNodesWithInitialPositioning(this.props.data.nodes),\r\n            links: this.props.data.links,\r\n          }}\r\n          // data = { this.props.data }\r\n          config={this.state.config}\r\n          onClickNode={this.onClickNode}\r\n        />\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GraphDisplayer;","import React from 'react';\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Container from '@material-ui/core/Container'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport { GetData, GetAllPerson } from './getData'\r\nimport SearchInput from './searchInput'\r\nimport DataDisplayer from './dataDisplayer';\r\nimport GraphDisplayer from './graphDisplayer';\r\n\r\n// CSS-like styling\r\nconst styles = {\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    background: 'white',\r\n    height: '100vh',\r\n  },\r\n  searchContainer: {\r\n    background: '#2196f3'\r\n  },\r\n  mainContainer: {\r\n    flex: '0 1 100%',\r\n    overflowY: 'auto',\r\n  },\r\n  dataContainer: {\r\n    background: '#fafafa',\r\n    overflowY: 'auto',\r\n    maxHeight: '100%',\r\n  },\r\n  graphContainer: {\r\n    background: '#fff',\r\n    height: '100%',\r\n  },\r\n  displayerContainer: {\r\n  }\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Initialize state data\r\n    this.state = {\r\n      personList: [],\r\n      currentPerson: {\r\n        id: '0',\r\n        name: '-',\r\n        friends: [],\r\n      },\r\n      searching: false,\r\n      fail: false,\r\n      graphData: {\r\n        nodes: [\r\n          { id: '0', name: '-', x: -100, y: -100 }  // Dummy data so graph renderer wouldn't crash\r\n        ],\r\n        links: [],\r\n      }\r\n    };\r\n\r\n    // Bind methods\r\n    this.GetPersonList = this.GetPersonList.bind(this);\r\n    this.onSearch = this.onSearch.bind(this);\r\n    this.updateGraphData = this.updateGraphData.bind(this);\r\n  }\r\n\r\n  // Get a list of all people from the API\r\n  async GetPersonList() {\r\n    const list = await GetAllPerson();\r\n    this.state.personList = list;\r\n  }\r\n\r\n  // Does a search on the api based on the parameter 'text'\r\n  // Will try to search the person as an id first, before trying to find someone by name.\r\n  // PARAMS:\r\n  //     - text: The thing to search\r\n  async onSearch(text) {\r\n    // Reject if search is ongoing\r\n    if (this.state.searching) {\r\n      return;\r\n    }\r\n    this.setState({ searching: true });\r\n\r\n    text = text.trim();\r\n    let parsedId = parseInt(text);\r\n    // Try parse as id first\r\n    if (!isNaN(parsedId)) {\r\n      let collectedData = await GetData(text);\r\n      // Check if data valid\r\n      if (collectedData.status === 200) {\r\n        this.setState({ \r\n          searching: false,\r\n          currentPerson: collectedData.payload,\r\n          fail: false,\r\n        });\r\n        \r\n        this.updateGraphData()\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Get person list if it does not exist yet\r\n    if (this.state.personList.length === 0) {\r\n      this.GetPersonList();\r\n    }\r\n\r\n    // Wait until all found https://stackoverflow.com/questions/16149431/make-function-wait-until-element-exists\r\n    let checkExist = setInterval(async () => {\r\n      if (this.state.personList.length > 0) {\r\n        clearInterval(checkExist);\r\n         \r\n        // Get person\r\n        let foundList = this.state.personList.filter(e => e.name === text);\r\n        if (foundList.length > 0) {\r\n          let collectedData = await GetData(foundList[0].id);\r\n\r\n          // Update data\r\n          this.setState({ \r\n            searching: false,\r\n            currentPerson: collectedData.payload,\r\n            fail: false,\r\n          });\r\n          this.updateGraphData()\r\n        } else {\r\n          this.setState({ \r\n            searching: false,\r\n            fail: true,\r\n          });\r\n        }\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  // Update the data to feed into the graph\r\n  updateGraphData() {\r\n    let graphData = this.state.graphData;\r\n    // Check if current person not already exist in graph\r\n    if (graphData.nodes.find( item => { return item.id === this.state.currentPerson.id } ) === undefined) {\r\n\r\n      // Insert current person node\r\n      graphData.nodes.push({\r\n        id: this.state.currentPerson.id,\r\n        name: this.state.currentPerson.name,\r\n      })\r\n    }\r\n\r\n    // Check for all friends if not already exist\r\n    this.state.currentPerson.friends.forEach((friend, index) => {\r\n      if (graphData.nodes.find( item => { return item.id === friend.id } ) === undefined) {\r\n\r\n        // Insert friend node\r\n        graphData.nodes.push({\r\n          id: friend.id,\r\n          name: friend.name,\r\n        });\r\n      }\r\n\r\n      // Insert link if not already exist\r\n      let linkData = {\r\n        source: this.state.currentPerson.id,\r\n        target: friend.id,\r\n      };\r\n      if (graphData.links.find( item => { return (item.source === linkData.source) && (item.target === linkData.target) } ) === undefined) {\r\n        graphData.links.push(linkData);\r\n      }\r\n    })\r\n\r\n    this.setState({ graphData: graphData });\r\n    console.log(this.state);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Box style = { styles.root }>\r\n        <Box style = { styles.searchContainer }>\r\n          <Container>\r\n            <SearchInput \r\n              onSearch = { this.onSearch } \r\n              onEnterPressed = { this.onSearch }\r\n            />\r\n          </Container>\r\n        </Box>\r\n        <Grid container spacing={0} style = { styles.mainContainer }>\r\n          <Grid item xs={12} md={4} lg={3} style = {styles.dataContainer}>\r\n            <DataDisplayer \r\n              data = { this.state.currentPerson } \r\n              searching = { this.state.searching } \r\n              fail = { this.state.fail }\r\n              onSearch = { this.onSearch }\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} md={8} lg={9} style = { styles.graphContainer }>\r\n            <GraphDisplayer \r\n              data = { this.state.graphData } \r\n              onClick = { this.onSearch }\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <React.StrictMode>\n    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto:300,400,500'></link>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}